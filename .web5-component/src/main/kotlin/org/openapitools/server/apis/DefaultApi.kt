/**
* web5 SDK test server
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.CredentialIssuanceRequest
import org.openapitools.server.models.CredentialIssuanceResponse

fun Route.DefaultApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    post<Paths.credentialIssue> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "verifiableCredential" : {
            "issuanceDate" : "issuanceDate",
            "credentialSubject" : {
              "key" : ""
            },
            "id" : "id",
            "proof" : {
              "proofValue" : "proofValue",
              "created" : "created",
              "domain" : "domain",
              "jws" : "jws",
              "challenge" : "challenge",
              "proofPurpose" : "proofPurpose",
              "type" : "type",
              "verificationMethod" : "verificationMethod",
              "nonce" : "nonce"
            },
            "type" : [ "type", "type" ],
            "@context" : [ "@context", "@context" ],
            "issuer" : {
              "id" : "id"
            },
            "expirationDate" : "expirationDate"
          }
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
    }

}
